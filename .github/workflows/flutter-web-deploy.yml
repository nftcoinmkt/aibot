name: Deploy Flutter Web to Google Cloud

on:
  # push:
  #   branches: [ main, develop ]
  #   paths:
  #     - 'flutter_ai_bot/**'
  # pull_request:
  #   branches: [ main ]
  #   paths:
  #     - 'flutter_ai_bot/**'
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: aibot-frontend
  REGION: us-central1

jobs:
  build-and-deploy-web:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.0'
        channel: 'stable'
        cache: true
        
    - name: Get Flutter dependencies
      working-directory: ./flutter_ai_bot
      run: flutter pub get
      
    - name: Build Flutter web
      working-directory: ./flutter_ai_bot
      run: flutter build web --release --web-renderer html
      
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        
    - name: Setup Google Cloud CLI
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        
    - name: Create Dockerfile for web app
      working-directory: ./flutter_ai_bot
      run: |
        cat > Dockerfile << 'EOF'
        FROM nginx:alpine
        
        # Copy Flutter web build to nginx html directory
        COPY build/web /usr/share/nginx/html
        
        # Copy custom nginx configuration
        COPY nginx.conf /etc/nginx/nginx.conf
        
        # Expose port 8080 (Cloud Run requirement)
        EXPOSE 8080
        
        # Start nginx
        CMD ["nginx", "-g", "daemon off;"]
        EOF
        
    - name: Create nginx configuration
      working-directory: ./flutter_ai_bot
      run: |
        cat > nginx.conf << 'EOF'
        events {
            worker_connections 1024;
        }
        
        http {
            include /etc/nginx/mime.types;
            default_type application/octet-stream;
            
            server {
                listen 8080;
                server_name _;
                
                # Serve Flutter web app
                location / {
                    root /usr/share/nginx/html;
                    try_files $uri $uri/ /index.html;
                    
                    # Add headers for Flutter web
                    add_header Cross-Origin-Embedder-Policy require-corp;
                    add_header Cross-Origin-Opener-Policy same-origin;
                }
                
                # Handle Flutter assets
                location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                    root /usr/share/nginx/html;
                    expires 1y;
                    add_header Cache-Control "public, immutable";
                }
            }
        }
        EOF
        
    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker $REGION-docker.pkg.dev
      
    - name: Create Artifact Registry repository (if not exists)
      run: |
        gcloud artifacts repositories describe $SERVICE_NAME --location=$REGION || \
        gcloud artifacts repositories create $SERVICE_NAME \
          --repository-format=docker \
          --location=$REGION \
          --description="Docker repository for $SERVICE_NAME"
      
    - name: Build Docker image
      working-directory: ./flutter_ai_bot
      run: |
        docker build -t $REGION-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA .
        
    - name: Push Docker image
      run: |
        docker push $REGION-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA
        
    - name: Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --image $REGION-docker.pkg.dev/$PROJECT_ID/$SERVICE_NAME/$SERVICE_NAME:$GITHUB_SHA \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --port=8080 \
          --memory=512Mi \
          --cpu=1 \
          --min-instances=0 \
          --max-instances=5 \
          --timeout=300
          
    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
        echo "Flutter web app deployed at: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

  build-web-only:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.0'
        channel: 'stable'
        cache: true
        
    - name: Get Flutter dependencies
      working-directory: ./flutter_ai_bot
      run: flutter pub get
      
    - name: Build Flutter web (test)
      working-directory: ./flutter_ai_bot
      run: flutter build web --release --web-renderer html
      
    - name: Upload web build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: flutter-web-build
        path: flutter_ai_bot/build/web/
