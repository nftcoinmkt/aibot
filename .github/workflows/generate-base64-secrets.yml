name: Generate Base64 Secrets for iOS Signing

on:
  workflow_dispatch:
    inputs:
      certificate_file:
        description: 'Upload P12 certificate file (will be processed as artifact)'
        required: false
        type: string
      provisioning_profile:
        description: 'Upload provisioning profile file (will be processed as artifact)'
        required: false
        type: string

jobs:
  generate-base64:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Instructions for file upload
      run: |
        echo "=================================================="
        echo "üìã INSTRUCTIONS FOR GENERATING BASE64 SECRETS"
        echo "=================================================="
        echo ""
        echo "This workflow will help you generate base64 encoded strings"
        echo "for your iOS certificate and provisioning profile."
        echo ""
        echo "STEP 1: Upload your files to this repository"
        echo "----------------------------------------"
        echo "1. Place your .p12 certificate file in: ios-signing/certificate.p12"
        echo "2. Place your .mobileprovision file in: ios-signing/profile.mobileprovision"
        echo ""
        echo "STEP 2: Re-run this workflow after uploading files"
        echo "------------------------------------------------"
        echo "The workflow will automatically detect and encode your files."
        echo ""
        echo "‚ö†Ô∏è  SECURITY NOTE: Delete the files from the repository"
        echo "    after copying the base64 strings to GitHub Secrets!"
        echo ""
        
    - name: Create ios-signing directory
      run: |
        mkdir -p ios-signing
        echo "Created ios-signing directory for file uploads"
        
    - name: Check for certificate file
      id: check_cert
      run: |
        if [ -f "ios-signing/certificate.p12" ]; then
          echo "cert_exists=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Certificate file found: ios-signing/certificate.p12"
        else
          echo "cert_exists=false" >> $GITHUB_OUTPUT
          echo "‚ùå Certificate file not found. Please upload certificate.p12 to ios-signing/ directory"
        fi
        
    - name: Check for provisioning profile
      id: check_profile
      run: |
        if [ -f "ios-signing/profile.mobileprovision" ]; then
          echo "profile_exists=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Provisioning profile found: ios-signing/profile.mobileprovision"
        else
          echo "profile_exists=false" >> $GITHUB_OUTPUT
          echo "‚ùå Provisioning profile not found. Please upload profile.mobileprovision to ios-signing/ directory"
        fi
        
    - name: Generate base64 for certificate
      if: steps.check_cert.outputs.cert_exists == 'true'
      run: |
        echo "=================================================="
        echo "üîê CERTIFICATE BASE64 ENCODING"
        echo "=================================================="
        echo ""
        echo "Certificate file info:"
        file ios-signing/certificate.p12
        echo ""
        echo "Base64 encoded certificate (copy this to BUILD_CERTIFICATE_BASE64 secret):"
        echo "---BEGIN CERTIFICATE BASE64---"
        base64 -i ios-signing/certificate.p12
        echo "---END CERTIFICATE BASE64---"
        echo ""
        
    - name: Generate base64 for provisioning profile
      if: steps.check_profile.outputs.profile_exists == 'true'
      run: |
        echo "=================================================="
        echo "üì± PROVISIONING PROFILE BASE64 ENCODING"
        echo "=================================================="
        echo ""
        echo "Provisioning profile file info:"
        file ios-signing/profile.mobileprovision
        echo ""
        echo "Base64 encoded provisioning profile (copy this to BUILD_PROVISION_PROFILE_BASE64 secret):"
        echo "---BEGIN PROVISIONING PROFILE BASE64---"
        base64 -i ios-signing/profile.mobileprovision
        echo "---END PROVISIONING PROFILE BASE64---"
        echo ""
        
    - name: Extract provisioning profile info
      if: steps.check_profile.outputs.profile_exists == 'true'
      run: |
        echo "=================================================="
        echo "üìã PROVISIONING PROFILE INFORMATION"
        echo "=================================================="
        echo ""
        echo "Extracting provisioning profile details..."
        
        # Extract the plist content from the provisioning profile
        security cms -D -i ios-signing/profile.mobileprovision > profile_content.plist 2>/dev/null || true
        
        if [ -f "profile_content.plist" ]; then
          echo "Team ID:"
          /usr/libexec/PlistBuddy -c "Print :TeamIdentifier:0" profile_content.plist 2>/dev/null || echo "Could not extract Team ID"
          
          echo ""
          echo "App ID Name:"
          /usr/libexec/PlistBuddy -c "Print :AppIDName" profile_content.plist 2>/dev/null || echo "Could not extract App ID Name"
          
          echo ""
          echo "Bundle ID:"
          /usr/libexec/PlistBuddy -c "Print :Entitlements:application-identifier" profile_content.plist 2>/dev/null | sed 's/.*\.//' || echo "Could not extract Bundle ID"
          
          echo ""
          echo "Profile Name:"
          /usr/libexec/PlistBuddy -c "Print :Name" profile_content.plist 2>/dev/null || echo "Could not extract Profile Name"
          
          echo ""
          echo "Expiration Date:"
          /usr/libexec/PlistBuddy -c "Print :ExpirationDate" profile_content.plist 2>/dev/null || echo "Could not extract Expiration Date"
          
          rm -f profile_content.plist
        else
          echo "Could not extract provisioning profile information"
        fi
        
    - name: Final instructions
      run: |
        echo "=================================================="
        echo "üéØ NEXT STEPS"
        echo "=================================================="
        echo ""
        echo "1. Copy the base64 strings from the logs above"
        echo "2. Go to your repository Settings > Secrets and variables > Actions"
        echo "3. Add/update these secrets:"
        echo "   - BUILD_CERTIFICATE_BASE64: [certificate base64 string]"
        echo "   - BUILD_PROVISION_PROFILE_BASE64: [provisioning profile base64 string]"
        echo ""
        echo "4. Also ensure you have these other required secrets:"
        echo "   - P12_PASSWORD: [password for your .p12 certificate]"
        echo "   - KEYCHAIN_PASSWORD: [any secure password for temporary keychain]"
        echo "   - APPLE_ID: [your Apple ID email]"
        echo "   - APPLE_APP_SPECIFIC_PASSWORD: [app-specific password from Apple ID]"
        echo "   - APPLE_TEAM_ID: [your Apple Developer Team ID]"
        echo ""
        echo "5. üö® IMPORTANT: Delete the certificate and provisioning profile files"
        echo "   from the ios-signing/ directory after copying the base64 strings!"
        echo ""
        echo "6. Run the iOS TestFlight deployment workflow"
        echo ""
        
    - name: Security reminder
      run: |
        echo "=================================================="
        echo "üîí SECURITY REMINDER"
        echo "=================================================="
        echo ""
        echo "‚ö†Ô∏è  CRITICAL: Remove sensitive files from repository!"
        echo ""
        echo "After copying the base64 strings to GitHub Secrets:"
        echo "1. Delete ios-signing/certificate.p12"
        echo "2. Delete ios-signing/profile.mobileprovision"
        echo "3. Commit and push the deletion"
        echo ""
        echo "Never commit certificates or provisioning profiles to version control!"
        echo ""
