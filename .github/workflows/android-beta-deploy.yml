name: Android Beta Build and Deploy to Play Store

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: 'Version name (e.g., 1.0.0)'
        required: true
        default: '1.0.0'
      version_code:
        description: 'Version code (integer)'
        required: true
        default: '1'
  push:
    branches: [ main ]
    paths:
      - 'flutter_ai_bot/**'
    tags:
      - 'v*'

env:
  FLUTTER_VERSION: '3.24.3'
  JAVA_VERSION: '17'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Flutter doctor
      run: flutter doctor -v
      
    - name: Get Flutter dependencies
      working-directory: ./flutter_ai_bot
      run: flutter pub get
      
    - name: Run Flutter tests
      working-directory: ./flutter_ai_bot
      run: flutter test || echo "No tests found, skipping..."
      
    - name: Ensure Gradle wrapper uses 8.11.1
      working-directory: ./flutter_ai_bot/android
      shell: bash
      run: |
        set -e
        TARGET="gradle/wrapper/gradle-wrapper.properties"
        mkdir -p gradle/wrapper
        if [ -f "$TARGET" ]; then
          sed -i 's#^distributionUrl=.*#distributionUrl=https\\://services.gradle.org/distributions/gradle-8.11.1-all.zip#' "$TARGET"
          echo "Updated $TARGET to Gradle 8.11.1"
        else
          cat > "$TARGET" << 'EOF'
        distributionBase=GRADLE_USER_HOME
        distributionPath=wrapper/dists
        distributionUrl=https\://services.gradle.org/distributions/gradle-8.11.1-all.zip
        zipStoreBase=GRADLE_USER_HOME
        zipStorePath=wrapper/dists
        EOF
          echo "Created $TARGET with Gradle 8.11.1"
        fi

    - name: Create Android keystore
      working-directory: ./flutter_ai_bot/android
      run: |
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > app/upload-keystore.jks
        
    - name: Create key.properties
      working-directory: ./flutter_ai_bot/android
      run: |
        cat > key.properties << EOF
        storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
        keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
        storeFile=upload-keystore.jks
        EOF
        
    - name: Update version in pubspec.yaml
      working-directory: ./flutter_ai_bot
      run: |
        VERSION_NAME="${{ github.event.inputs.version_name || '1.0.0' }}"
        VERSION_CODE="${{ github.event.inputs.version_code || github.run_number }}"
        sed -i "s/^version: .*/version: $VERSION_NAME+$VERSION_CODE/" pubspec.yaml
        echo "Updated version to: $VERSION_NAME+$VERSION_CODE"
        
    - name: Build Android App Bundle (AAB)
      working-directory: ./flutter_ai_bot
      run: |
        flutter build appbundle --release \
          --dart-define=API_BASE_URL=${{ secrets.API_BASE_URL }} \
          --dart-define=ENVIRONMENT=production
        
    - name: Build Android APK
      working-directory: ./flutter_ai_bot
      run: |
        flutter build apk --release \
          --dart-define=API_BASE_URL=${{ secrets.API_BASE_URL }} \
          --dart-define=ENVIRONMENT=production
          
    - name: Sign APK
      working-directory: ./flutter_ai_bot
      run: |
        $ANDROID_HOME/build-tools/34.0.0/zipalign -v -p 4 \
          build/app/outputs/flutter-apk/app-release.apk \
          build/app/outputs/flutter-apk/app-release-aligned.apk
          
        $ANDROID_HOME/build-tools/34.0.0/apksigner sign \
          --ks android/app/upload-keystore.jks \
          --ks-key-alias ${{ secrets.ANDROID_KEY_ALIAS }} \
          --ks-pass pass:${{ secrets.ANDROID_KEYSTORE_PASSWORD }} \
          --key-pass pass:${{ secrets.ANDROID_KEY_PASSWORD }} \
          --out build/app/outputs/flutter-apk/app-release-signed.apk \
          build/app/outputs/flutter-apk/app-release-aligned.apk
          
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: android-apk
        path: |
          flutter_ai_bot/build/app/outputs/flutter-apk/app-release-signed.apk
          flutter_ai_bot/build/app/outputs/bundle/release/app-release.aab
        retention-days: 30
        
    - name: Create Google Play service account key
      run: |
        echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" > service-account.json
        
    - name: Upload to Google Play Store (Open Testing)
      uses: r0adkll/upload-google-play@v1.1.3
      with:
        serviceAccountJson: service-account.json
        packageName: ${{ secrets.ANDROID_PACKAGE_NAME }}
        releaseFiles: flutter_ai_bot/build/app/outputs/bundle/release/app-release.aab
        track: beta
        status: completed
        inAppUpdatePriority: 2
        whatsNewDirectory: metadata/android
        mappingFile: flutter_ai_bot/build/app/outputs/mapping/release/mapping.txt
        
    - name: Create GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          flutter_ai_bot/build/app/outputs/flutter-apk/app-release-signed.apk
          flutter_ai_bot/build/app/outputs/bundle/release/app-release.aab
        body: |
          ## Android Beta Release
          
          **Version:** ${{ github.event.inputs.version_name || github.ref_name }}
          **Build:** ${{ github.event.inputs.version_code || github.run_number }}
          
          ### Changes
          - Automated build from GitHub Actions
          - Deployed to Google Play Store Beta track
          
          ### Downloads
          - **APK**: Direct install file
          - **AAB**: App Bundle for Play Store
          
        draft: false
        prerelease: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Cleanup
      if: always()
      run: |
        rm -f service-account.json
        rm -f flutter_ai_bot/android/app/upload-keystore.jks
        rm -f flutter_ai_bot/android/key.properties
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "‚úÖ Android beta build deployed successfully to Google Play Store!"
          echo "üì± APK and AAB files are available in the artifacts."
          echo "üöÄ Beta testers can now access the app through the Play Store."
        else
          echo "‚ùå Android beta deployment failed. Check the logs above."
        fi
