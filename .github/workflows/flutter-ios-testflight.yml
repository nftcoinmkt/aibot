name: Build Flutter iOS and Deploy to TestFlight

on:
  # push:
  #   branches: [ main, develop ]
  #   paths:
  #     - 'flutter_ai_bot/**'
  # pull_request:
  #   branches: [ main ]
  #   paths:
  #     - 'flutter_ai_bot/**'
  workflow_dispatch:
    inputs:
      build_number:
        description: 'Build number (optional, will auto-increment if not provided)'
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.0'
        channel: 'stable'
        cache: true
        
    - name: Get Flutter dependencies
      working-directory: ./flutter_ai_bot
      run: flutter pub get
      
    - name: Run Flutter tests
      working-directory: ./flutter_ai_bot
      run: flutter test
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install Apple Certificate and Provisioning Profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificate to keychain
        security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        
        # Set the keychain as default and make it searchable
        security default-keychain -s $KEYCHAIN_PATH
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        
        # Extract and analyze provisioning profile
        echo "Analyzing provisioning profile..."
        security cms -D -i $PP_PATH > /tmp/profile_content.plist
        
        # Extract key information
        PROFILE_UUID=$(grep -A1 UUID /tmp/profile_content.plist | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
        BUNDLE_ID=$(grep -A1 application-identifier /tmp/profile_content.plist | grep string | sed 's/.*<string>[^.]*\.\(.*\)<\/string>.*/\1/')
        
        # Try multiple ways to extract Team ID
        TEAM_ID=$(grep -A1 'TeamIdentifier' /tmp/profile_content.plist | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
        if [[ -z "$TEAM_ID" ]]; then
          TEAM_ID=$(grep -A1 'com.apple.developer.team-identifier' /tmp/profile_content.plist | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
        fi
        
        # Debug: Show relevant sections of the profile
        echo "=== Profile Debug Info ==="
        echo "TeamIdentifier section:"
        grep -A2 -B2 'TeamIdentifier' /tmp/profile_content.plist || echo "TeamIdentifier not found"
        echo "Team identifier entitlement:"
        grep -A2 -B2 'com.apple.developer.team-identifier' /tmp/profile_content.plist || echo "team-identifier entitlement not found"
        
        echo "Provisioning profile UUID: $PROFILE_UUID"
        echo "Bundle ID in profile: $BUNDLE_ID"
        echo "Team ID in profile: $TEAM_ID"
        echo "Expected bundle ID: com.hippocampus.brain"
        
        # Check if bundle IDs match
        if [[ "$BUNDLE_ID" != "com.hippocampus.brain" ]]; then
          echo "❌ Bundle ID mismatch! Profile is for '$BUNDLE_ID' but project uses 'com.hippocampus.brain'"
          echo "You need to create a new provisioning profile for com.hippocampus.brain"
          exit 1
        fi
        
        # Copy with proper UUID name
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
        
        # List installed provisioning profiles
        echo "Installed provisioning profiles:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        
        # Verify certificate installation
        echo "Installed certificates:"
        security find-identity -v -p codesigning $KEYCHAIN_PATH
        
    - name: Set build number
      working-directory: ./flutter_ai_bot
      run: |
        if [ -n "${{ github.event.inputs.build_number }}" ]; then
          BUILD_NUMBER="${{ github.event.inputs.build_number }}"
        else
          BUILD_NUMBER=${{ github.run_number }}
        fi
        echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
        
        # Update pubspec.yaml with new build number
        sed -i '' "s/version: 1.0.0+[0-9]*/version: 1.0.0+$BUILD_NUMBER/" pubspec.yaml
        
    - name: Build iOS Archive
      working-directory: ./flutter_ai_bot
      run: |
        # Debug: Show current signing setup
        echo "=== Pre-build Debug Info ==="
        echo "Available provisioning profiles:"
        ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
        echo ""
        echo "Available signing identities:"
        security find-identity -v -p codesigning
        echo ""
        echo "Xcode project bundle ID:"
        grep -A1 PRODUCT_BUNDLE_IDENTIFIER ios/Runner.xcodeproj/project.pbxproj | head -1
        echo ""
        
        # Set code signing environment variables
        export DEVELOPMENT_TEAM="9DP9KC9L59"
        export CODE_SIGN_IDENTITY="Apple Distribution"
        
        # Debug: Show Flutter and Xcode versions
        echo "Flutter version:"
        flutter --version
        echo ""
        echo "Xcode version:"
        xcodebuild -version
        echo ""
        
        # Try building with verbose output
        echo "Starting iOS build..."
        flutter build ipa --release \
          --build-number=$BUILD_NUMBER \
          --export-options-plist=ios/Runner/ExportOptions.plist \
          --dart-define=DEVELOPMENT_TEAM=9DP9KC9L59 \
          --verbose
        
    - name: Upload to TestFlight
      working-directory: ./flutter_ai_bot
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        # Find the actual IPA file location
        echo "Looking for IPA files..."
        find build -name "*.ipa" -type f 2>/dev/null || echo "No IPA files found in build directory"
        
        # List build directory structure
        echo "Build directory structure:"
        ls -la build/ 2>/dev/null || echo "Build directory not found"
        ls -la build/ios/ 2>/dev/null || echo "iOS build directory not found"
        
        # Try common IPA locations
        IPA_PATH=""
        if [ -f "build/ios/ipa/flutter_ai_bot.ipa" ]; then
          IPA_PATH="build/ios/ipa/flutter_ai_bot.ipa"
        elif [ -f "build/ios/ipa/Runner.ipa" ]; then
          IPA_PATH="build/ios/ipa/Runner.ipa"
        else
          # Find any IPA file
          IPA_PATH=$(find build -name "*.ipa" -type f | head -1)
        fi
        
        if [ -z "$IPA_PATH" ]; then
          echo "❌ No IPA file found!"
          exit 1
        fi
        
        echo "✅ Found IPA at: $IPA_PATH"
        echo "IPA file size: $(ls -lh "$IPA_PATH" | awk '{print $5}')"
        
        # Upload to TestFlight
        xcrun altool --upload-app \
          --type ios \
          --file "$IPA_PATH" \
          --username "$APPLE_ID" \
          --password "$APPLE_APP_SPECIFIC_PASSWORD" \
          --asc-provider "$APPLE_TEAM_ID"
          
    - name: Upload IPA Artifact
      uses: actions/upload-artifact@v4
      with:
        name: flutter-ai-bot-ios-ipa
        path: flutter_ai_bot/build/ios/ipa/*.ipa
        
    - name: Create Release (on main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ios-v${{ env.BUILD_NUMBER }}
        name: Flutter AI Bot iOS v${{ env.BUILD_NUMBER }}
        files: |
          flutter_ai_bot/build/ios/ipa/*.ipa
        generate_release_notes: true
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Clean up keychain and provisioning profile
      if: ${{ always() }}
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
        rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision || true
