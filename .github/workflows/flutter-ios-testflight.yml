name: Build Flutter iOS and Deploy to TestFlight

on:
  # push:
  #   branches: [ main, develop ]
  #   paths:
  #     - 'flutter_ai_bot/**'
  # pull_request:
  #   branches: [ main ]
  #   paths:
  #     - 'flutter_ai_bot/**'
  workflow_dispatch:
    inputs:
      build_number:
        description: 'Build number (optional, will auto-increment if not provided)'
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.0'
        channel: 'stable'
        cache: true
        
    - name: Get Flutter dependencies
      working-directory: ./flutter_ai_bot
      run: flutter pub get
      
    - name: Run Flutter tests
      working-directory: ./flutter_ai_bot
      run: flutter test
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Install Apple Certificate and Provisioning Profile
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      run: |
        # Create variables
        CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
        PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
        KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

        # Import certificate and provisioning profile from secrets
        echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
        echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode > $PP_PATH

        # Verify files were created successfully
        if [ ! -f "$CERTIFICATE_PATH" ]; then
          echo "Error: Certificate file was not created"
          exit 1
        fi
        
        if [ ! -f "$PP_PATH" ]; then
          echo "Error: Provisioning profile file was not created"
          exit 1
        fi

        # Verify certificate file is valid
        file_output=$(file "$CERTIFICATE_PATH")
        if [[ ! "$file_output" == *"PKCS#12"* ]]; then
          echo "Error: Certificate file is not a valid PKCS#12 file"
          echo "File type detected: $file_output"
          exit 1
        fi

        # Create temporary keychain
        security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

        # Import certificate to keychain with better error handling
        if ! security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH; then
          echo "Error: Failed to import certificate to keychain"
          echo "Certificate path: $CERTIFICATE_PATH"
          echo "Keychain path: $KEYCHAIN_PATH"
          exit 1
        fi
        
        security list-keychain -d user -s $KEYCHAIN_PATH

        # Apply provisioning profile
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
        
    - name: Set build number
      working-directory: ./flutter_ai_bot
      run: |
        if [ -n "${{ github.event.inputs.build_number }}" ]; then
          BUILD_NUMBER="${{ github.event.inputs.build_number }}"
        else
          BUILD_NUMBER=${{ github.run_number }}
        fi
        echo "BUILD_NUMBER=$BUILD_NUMBER" >> $GITHUB_ENV
        
        # Update pubspec.yaml with new build number
        sed -i '' "s/version: 1.0.0+[0-9]*/version: 1.0.0+$BUILD_NUMBER/" pubspec.yaml
        
    - name: Create ExportOptions.plist if not exists
      working-directory: ./flutter_ai_bot/ios/Runner
      run: |
        if [ ! -f "ExportOptions.plist" ]; then
          cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
            <key>teamID</key>
            <string>${{ secrets.APPLE_TEAM_ID }}</string>
        </dict>
        </plist>
        EOF
        fi
        
    - name: Build iOS Archive
      working-directory: ./flutter_ai_bot
      run: |
        flutter build ipa --release \
          --build-number=$BUILD_NUMBER \
          --export-options-plist=ios/Runner/ExportOptions.plist
        
    - name: Upload to TestFlight
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: |
        xcrun altool --upload-app \
          --type ios \
          --file flutter_ai_bot/build/ios/ipa/flutter_ai_bot.ipa \
          --username "$APPLE_ID" \
          --password "$APPLE_APP_SPECIFIC_PASSWORD" \
          --asc-provider "$APPLE_TEAM_ID"
          
    - name: Upload IPA Artifact
      uses: actions/upload-artifact@v4
      with:
        name: flutter-ai-bot-ios-ipa
        path: flutter_ai_bot/build/ios/ipa/flutter_ai_bot.ipa
        
    - name: Create Release (on main branch)
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ios-v${{ env.BUILD_NUMBER }}
        name: Flutter AI Bot iOS v${{ env.BUILD_NUMBER }}
        files: |
          flutter_ai_bot/build/ios/ipa/flutter_ai_bot.ipa
        generate_release_notes: true
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Clean up keychain and provisioning profile
      if: ${{ always() }}
      run: |
        security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
        rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision || true
